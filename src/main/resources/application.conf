akka {
  actor {
    provider = "cluster"
    serialize-messages = on
    serializers {
      jackson-json = "akka.serialization.jackson.JacksonJsonSerializer"
    }
    serialization-bindings {
      "com.jessepreiner.scheduling.schedule.protocol.JsonSerializable" = jackson-json
    }
  }
  remote.artery {
    canonical {
      hostname = "0.0.0.0"
      port = 2551
    }
  }
  cluster {
    min-nr-of-members = 1
    seed-nodes = [
      "akka://ScheduleSystem@0.0.0.0:2551"
    ]
    downing-provider-class = "akka.cluster.sbr.SplitBrainResolverProvider"
  }

  extensions = [akka.persistence.Persistence]
  //
  //  persistence {
  //
  //    journal {
  //      leveldb.dir = "target/journal"
  //      plugin = "akka.persistence.journal.leveldb"
  //      auto-start-journals = ["akka.persistence.journal.leveldb"]
  //    }
  //
  //    snapshot-store {
  //      plugin = "akka.persistence.snapshot-store.local"
  //      auto-start-snapshot-stores = ["akka.persistence.snapshot-store.local"]
  //    }
  //  }

  persistence {
    journal {
      plugin = "akka.persistence.cassandra.journal"
    }
    snapshot-store {
      plugin = "akka.persistence.cassandra.snapshot"
    }
    query {
      read-journal = "akka.persistence.cassandra.query"
    }
    cassandra {
      journal {
        keyspace = "schedulejournal"
        keyspace-autocreate = true
        tables-autocreate = true
      }
      snapshot {
        keyspace-autocreate = true
        tables-autocreate = true
      }
    }
  }
  projection.cassandra {
    session-config-path = "akka.projection.cassandra.session-config"

    session-config {
      # The implementation of `akka.stream.alpakka.cassandra.CqlSessionProvider`
      # used for creating the `CqlSession`.
      # It may optionally have a constructor with an `ClassicActorSystemProvider` and `Config` parameters.
      session-provider = "akka.stream.alpakka.cassandra.DefaultSessionProvider"

      # Configure Akka Discovery by setting a service name
      service-discovery {
        name = ""
        lookup-timeout = 1 s
      }

      # The ExecutionContext to use for the session tasks and future composition.
      session-dispatcher = "akka.actor.default-dispatcher"

      # Full config path to the Datastax Java driver's configuration section.
      # When connecting to more than one Cassandra cluster different session configuration can be
      # defined with this property.
      # and https://docs.datastax.com/en/developer/java-driver/latest/manual/core/configuration/reference/
      datastax-java-driver-config = "datastax-java-driver"
    }

    offset-store {
      keyspace = "akka_projection"
      table = "offset_store"
    }
  }
}

datastax-java-driver {
  advanced.reconnect-on-init = true
  basic.contact-points = ["0.0.0.0:9042"]
  basic.load-balancing-policy.local-datacenter = "datacenter1"

  advanced.auth-provider {
    class = PlainTextAuthProvider
    username = cassandra
    password = cassandra
  }

  profiles {
    akka-persistence-cassandra-profile {
      basic.request {
        consistency = QUORUM
        # the journal does not use any counters or collections
        default-idempotence = true
      }
    }
    akka-persistence-cassandra-snapshot-profile {
      basic.request {
        consistency = ONE
        # the snapshot store does not use any counters or collections
        default-idempotence = true
      }
    }
  }
}